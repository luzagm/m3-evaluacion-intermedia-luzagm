{"version":3,"sources":["components/Pokemon.js","components/PokeList.js","components/App.js","serviceWorker.js","index.js"],"names":["Pokemon","pokemonTypeList","this","props","pokemonType","map","power","id","className","key","src","pokemonImage","alt","pokemonName","React","Component","PokeList","pokemonList","pokemons","pokemonItem","url","name","types","App","state","filterPokemonByName","getPokemons","bind","filterPokemon","fetch","then","response","json","data","setState","ev","target","value","console","log","filterName","filter","pokemon","toUpperCase","includes","htmlFor","type","onChange","ffilterByName","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2SAmCeA,G,sLA7BX,IAAIC,EAAkBC,KAAKC,MAAMC,YAAYC,KAAI,SAACC,EAAOC,GACvD,OACE,wBAAIC,UAAU,oBAAoBC,IAAKF,GACpCD,MAKP,OACE,yBAAKE,UAAU,gBACb,yBACEE,IAAG,UAAKR,KAAKC,MAAMQ,cACnBC,IAAKV,KAAKC,MAAMU,YAChBL,UAAU,kBAGZ,wBAAIA,UAAU,gBAAgBN,KAAKC,MAAMU,aAEzC,wBAAIL,UAAU,gBAAgBP,Q,GApBhBa,IAAMC,YCgBbC,E,iLAdX,IAAIC,EAAcf,KAAKC,MAAMe,SAASb,KAAI,SAACc,EAAaZ,GACtD,OACE,kBAAC,EAAD,CACEE,IAAKF,EACLI,aAAcQ,EAAYC,IAC1BP,YAAaM,EAAYE,KACzBjB,YAAae,EAAYG,WAI/B,OAAO,6BAAML,O,GAZMH,IAAMC,WCmDdQ,G,kBAhDb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXN,SAAU,GACVO,oBAAqB,IAEvB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKD,cARO,E,2EAWC,IAAD,OACZG,MAfQ,eAgBLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OACR,EAAKC,SAAS,CACZhB,SAAUe,S,mCAKLE,GACXjC,KAAKgC,SAAS,CACZT,oBAAqBU,EAAGC,OAAOC,U,+BAIzB,IAAD,OACPC,QAAQC,IAAIrC,KAAKsB,MAAMN,UACvB,IAAIsB,EAAatC,KAAKsB,MAAMN,SAASuB,QAAO,SAAAC,GAC1C,OAAOA,EAAQrB,KACZsB,cACAC,SAAS,EAAKpB,MAAMC,oBAAoBkB,kBAG7C,OACE,yBAAKnC,UAAU,iBACb,mDACA,8BACE,2BAAOqC,QAAQ,gBAAf,YACA,2BAAOtC,GAAG,eAAeuC,KAAK,OAAOC,SAAU7C,KAAK8C,iBAEtD,kBAAC,EAAD,CAAU9B,SAAUsB,S,GA3CV1B,IAAMC,YCMJkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,kB","file":"static/js/main.89e6278f.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"../stylesheet/pokemon.css\";\n\nclass Pokemon extends React.Component {\n  render() {\n    let pokemonTypeList = this.props.pokemonType.map((power, id) => {\n      return (\n        <li className=\"pokemon-list-item\" key={id}>\n          {power}\n        </li>\n      );\n    });\n\n    return (\n      <div className=\"pokemon-card\">\n        <img\n          src={`${this.props.pokemonImage}`}\n          alt={this.props.pokemonName}\n          className=\"pokemon-image\"\n        ></img>\n\n        <h2 className=\"pokemon-name\">{this.props.pokemonName}</h2>\n\n        <ul className=\"pokemon-type\">{pokemonTypeList}</ul>\n      </div>\n    );\n  }\n}\n\nPokemon.propTypes = {\n  pokemonName: PropTypes.string,\n  pokemonType: PropTypes.string\n};\n\nexport default Pokemon;\n","import React from \"react\";\nimport Pokemon from \"./Pokemon\";\nimport \"../stylesheet/pokemon.css\";\n\nclass PokeList extends React.Component {\n  render() {\n    let pokemonList = this.props.pokemons.map((pokemonItem, id) => {\n      return (\n        <Pokemon\n          key={id}\n          pokemonImage={pokemonItem.url}\n          pokemonName={pokemonItem.name}\n          pokemonType={pokemonItem.types}\n        />\n      );\n    });\n    return <div>{pokemonList}</div>;\n  }\n}\n\nexport default PokeList;\n","import React from \"react\";\nimport PokeList from \"./PokeList\";\nimport \"../stylesheet/App.css\";\n\nconst url = \"./data.json\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      pokemons: [],\n      filterPokemonByName: \"\"\n    };\n    this.getPokemons = this.getPokemons.bind(this);\n    this.filterPokemon = this.filterPokemon.bind(this);\n    this.getPokemons();\n  }\n\n  getPokemons() {\n    fetch(url)\n      .then(response => response.json())\n      .then(data =>\n        this.setState({\n          pokemons: data\n        })\n      );\n  }\n\n  filterByName(ev) {\n    this.setState({\n      filterPokemonByName: ev.target.value\n    });\n  }\n\n  render() {\n    console.log(this.state.pokemons);\n    let filterName = this.state.pokemons.filter(pokemon => {\n      return pokemon.name\n        .toUpperCase()\n        .includes(this.state.filterPokemonByName.toUpperCase());\n    });\n\n    return (\n      <div className=\"cards-wrapper\">\n        <h1>Mi lista de Pokemon</h1>\n        <form>\n          <label htmlFor=\"input-search\">Buscar: </label>\n          <input id=\"input-search\" type=\"text\" onChange={this.ffilterByName} />\n        </form>\n        <PokeList pokemons={filterName} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}